/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ItemInterface extends ethers.utils.Interface {
  functions: {
    "_itemsOfHolder(address,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "burnBatch(address,uint256[],uint256[])": FunctionFragment;
    "createItemsData(uint256[],string[],string[],string[],string[],uint256[],uint256[])": FunctionFragment;
    "getAllItems()": FunctionFragment;
    "getItem(uint256)": FunctionFragment;
    "getItemNft(uint256)": FunctionFragment;
    "getItemReadable(address)": FunctionFragment;
    "getItemsOf(address)": FunctionFragment;
    "getTotalItems()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "mintBatch(address,uint256[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setURI(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "useItem(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_itemsOfHolder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createItemsData",
    values: [
      BigNumberish[],
      string[],
      string[],
      string[],
      string[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemReadable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getItemsOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "useItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_itemsOfHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createItemsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getItemNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getItemReadable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItemsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "useItem", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "UseItem(tuple,tuple,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UseItem"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    account: string;
    operator: string;
    approved: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type URIEvent = TypedEvent<
  [string, BigNumber] & { value: string; id: BigNumber }
>;

export type UseItemEvent = TypedEvent<
  [
    [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    },
    [
      [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      },
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      };
      cost: BigNumber;
      amount: BigNumber;
    },
    string,
    BigNumber
  ] & {
    pokemon: [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    };
    item: [
      [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      },
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      };
      cost: BigNumber;
      amount: BigNumber;
    };
    sender: string;
    timestamp: BigNumber;
  }
>;

export class Item extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ItemInterface;

  functions: {
    _itemsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber }>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createItemsData(
      itemsIndexes: BigNumberish[],
      itemsNames: string[],
      itemsDescription: string[],
      itemsImageURIs: string[],
      itemsCategory: string[],
      itemsCost: BigNumberish[],
      itemsEffect: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          };
          cost: BigNumber;
          amount: BigNumber;
        })[]
      ]
    >;

    getItem(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getItemNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getItemReadable(
      itemData: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          };
          cost: BigNumber;
          amount: BigNumber;
        }
      ]
    >;

    getItemsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          };
          cost: BigNumber;
          amount: BigNumber;
        })[]
      ]
    >;

    getTotalItems(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBatch(
      account: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setURI(
      newuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    useItem(
      _contractAddress: string,
      pokemonIndex: BigNumberish,
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _itemsOfHolder(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber }>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burn(
    account: string,
    id: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnBatch(
    account: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createItemsData(
    itemsIndexes: BigNumberish[],
    itemsNames: string[],
    itemsDescription: string[],
    itemsImageURIs: string[],
    itemsCategory: string[],
    itemsCost: BigNumberish[],
    itemsEffect: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllItems(
    overrides?: CallOverrides
  ): Promise<
    ([
      [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      },
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      };
      cost: BigNumber;
      amount: BigNumber;
    })[]
  >;

  getItem(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getItemNft(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getItemReadable(
    itemData: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      },
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      };
      cost: BigNumber;
      amount: BigNumber;
    }
  >;

  getItemsOf(
    sender: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      },
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      };
      cost: BigNumber;
      amount: BigNumber;
    })[]
  >;

  getTotalItems(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    account: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBatch(
    account: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setURI(
    newuri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  useItem(
    _contractAddress: string,
    pokemonIndex: BigNumberish,
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _itemsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber }>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createItemsData(
      itemsIndexes: BigNumberish[],
      itemsNames: string[],
      itemsDescription: string[],
      itemsImageURIs: string[],
      itemsCategory: string[],
      itemsCost: BigNumberish[],
      itemsEffect: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAllItems(
      overrides?: CallOverrides
    ): Promise<
      ([
        [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        };
        cost: BigNumber;
        amount: BigNumber;
      })[]
    >;

    getItem(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getItemNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getItemReadable(
      itemData: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        };
        cost: BigNumber;
        amount: BigNumber;
      }
    >;

    getItemsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        };
        cost: BigNumber;
        amount: BigNumber;
      })[]
    >;

    getTotalItems(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      account: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setURI(newuri: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    useItem(
      _contractAddress: string,
      pokemonIndex: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    URI(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    "UseItem(tuple,tuple,address,uint256)"(
      pokemon?: null,
      item?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        },
        [
          [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          };
          cost: BigNumber;
          amount: BigNumber;
        },
        string,
        BigNumber
      ],
      {
        pokemon: [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        };
        item: [
          [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          };
          cost: BigNumber;
          amount: BigNumber;
        };
        sender: string;
        timestamp: BigNumber;
      }
    >;

    UseItem(
      pokemon?: null,
      item?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        },
        [
          [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          };
          cost: BigNumber;
          amount: BigNumber;
        },
        string,
        BigNumber
      ],
      {
        pokemon: [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        };
        item: [
          [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          };
          cost: BigNumber;
          amount: BigNumber;
        };
        sender: string;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    _itemsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createItemsData(
      itemsIndexes: BigNumberish[],
      itemsNames: string[],
      itemsDescription: string[],
      itemsImageURIs: string[],
      itemsCategory: string[],
      itemsCost: BigNumberish[],
      itemsEffect: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllItems(overrides?: CallOverrides): Promise<BigNumber>;

    getItem(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getItemNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemReadable(
      itemData: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemsOf(sender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalItems(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBatch(
      account: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setURI(
      newuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    useItem(
      _contractAddress: string,
      pokemonIndex: BigNumberish,
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _itemsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createItemsData(
      itemsIndexes: BigNumberish[],
      itemsNames: string[],
      itemsDescription: string[],
      itemsImageURIs: string[],
      itemsCategory: string[],
      itemsCost: BigNumberish[],
      itemsEffect: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getItem(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemReadable(
      itemData: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      account: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setURI(
      newuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    useItem(
      _contractAddress: string,
      pokemonIndex: BigNumberish,
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
