/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PokemonFactoryInterface extends ethers.utils.Interface {
  functions: {
    "bosses(uint256)": FunctionFragment;
    "bossesIds(uint256)": FunctionFragment;
    "changeHpOf(uint256,address,uint256,bool)": FunctionFragment;
    "createBossesData(uint256[],uint256[])": FunctionFragment;
    "createPokemonsData(uint256[],string[],string[],uint256[],uint256[])": FunctionFragment;
    "getAllBossesIds()": FunctionFragment;
    "getAllPokemons()": FunctionFragment;
    "getBoss(uint256)": FunctionFragment;
    "getPokemon(uint256)": FunctionFragment;
    "getPokemonByIndexOf(uint256,address)": FunctionFragment;
    "getPokemonNft(uint256)": FunctionFragment;
    "getPokemonReadable(address)": FunctionFragment;
    "getPokemonSelected(address,uint256)": FunctionFragment;
    "getPokemonsOf(address)": FunctionFragment;
    "getTotalPokemons()": FunctionFragment;
    "hasNft()": FunctionFragment;
    "holders(uint256)": FunctionFragment;
    "itemAddress()": FunctionFragment;
    "nftsOfHolder(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pokemons(uint256)": FunctionFragment;
    "pokemonsNft(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateItemAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bosses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bossesIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeHpOf",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createBossesData",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createPokemonsData",
    values: [BigNumberish[], string[], string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBossesIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPokemons",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBoss",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonByIndexOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonReadable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonSelected",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPokemons",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasNft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "holders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "itemAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftsOfHolder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pokemons",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pokemonsNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemAddress",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "bosses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bossesIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeHpOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBossesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPokemonsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBossesIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPokemons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBoss", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPokemon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonByIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonReadable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonSelected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPokemons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "itemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftsOfHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pokemons", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokemonsNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateItemAddress",
    data: BytesLike
  ): Result;

  events: {
    "LevelUp(uint256,tuple,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LevelUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LevelUpEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, BigNumber, BigNumber] & {
      hp: BigNumber;
      maxHp: BigNumber;
      attack: BigNumber;
    },
    string,
    BigNumber
  ] & {
    level: BigNumber;
    stats: [BigNumber, BigNumber, BigNumber] & {
      hp: BigNumber;
      maxHp: BigNumber;
      attack: BigNumber;
    };
    sender: string;
    timestamp: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class PokemonFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PokemonFactoryInterface;

  functions: {
    bosses(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    bossesIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeHpOf(
      pokemonIndex: BigNumberish,
      account: string,
      hp: BigNumberish,
      isIncrement: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBossesData(
      _bossesIds: BigNumberish[],
      bossesLevel: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPokemonsData(
      pokemonIndexes: BigNumberish[],
      pokemonNames: string[],
      pokemonImageURIs: string[],
      pokemonHp: BigNumberish[],
      pokemonAttack: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllBossesIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAllPokemons(overrides?: CallOverrides): Promise<[string[]]>;

    getBoss(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getPokemon(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getPokemonByIndexOf(
      pokemonIndex: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPokemonNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPokemonReadable(
      pokemonData: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        }
      ]
    >;

    getPokemonSelected(
      sender: string,
      pokemonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        }
      ]
    >;

    getPokemonsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        })[]
      ]
    >;

    getTotalPokemons(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasNft(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        }
      ]
    >;

    holders(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    itemAddress(overrides?: CallOverrides): Promise<[string]>;

    nftsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pokemons(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    pokemonsNft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateItemAddress(
      _itemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bosses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  bossesIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  changeHpOf(
    pokemonIndex: BigNumberish,
    account: string,
    hp: BigNumberish,
    isIncrement: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBossesData(
    _bossesIds: BigNumberish[],
    bossesLevel: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPokemonsData(
    pokemonIndexes: BigNumberish[],
    pokemonNames: string[],
    pokemonImageURIs: string[],
    pokemonHp: BigNumberish[],
    pokemonAttack: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllBossesIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAllPokemons(overrides?: CallOverrides): Promise<string[]>;

  getBoss(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPokemon(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPokemonByIndexOf(
    pokemonIndex: BigNumberish,
    sender: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPokemonNft(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPokemonReadable(
    pokemonData: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    }
  >;

  getPokemonSelected(
    sender: string,
    pokemonIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    }
  >;

  getPokemonsOf(
    sender: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    })[]
  >;

  getTotalPokemons(overrides?: CallOverrides): Promise<BigNumber>;

  hasNft(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    }
  >;

  holders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  itemAddress(overrides?: CallOverrides): Promise<string>;

  nftsOfHolder(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pokemons(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pokemonsNft(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateItemAddress(
    _itemAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bosses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    bossesIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeHpOf(
      pokemonIndex: BigNumberish,
      account: string,
      hp: BigNumberish,
      isIncrement: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createBossesData(
      _bossesIds: BigNumberish[],
      bossesLevel: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createPokemonsData(
      pokemonIndexes: BigNumberish[],
      pokemonNames: string[],
      pokemonImageURIs: string[],
      pokemonHp: BigNumberish[],
      pokemonAttack: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAllBossesIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAllPokemons(overrides?: CallOverrides): Promise<string[]>;

    getBoss(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getPokemon(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getPokemonByIndexOf(
      pokemonIndex: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPokemonNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPokemonReadable(
      pokemonData: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      }
    >;

    getPokemonSelected(
      sender: string,
      pokemonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      }
    >;

    getPokemonsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      })[]
    >;

    getTotalPokemons(overrides?: CallOverrides): Promise<BigNumber>;

    hasNft(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      }
    >;

    holders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    itemAddress(overrides?: CallOverrides): Promise<string>;

    nftsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pokemons(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pokemonsNft(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateItemAddress(
      _itemAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LevelUp(uint256,tuple,address,uint256)"(
      level?: null,
      stats?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        string,
        BigNumber
      ],
      {
        level: BigNumber;
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        sender: string;
        timestamp: BigNumber;
      }
    >;

    LevelUp(
      level?: null,
      stats?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        string,
        BigNumber
      ],
      {
        level: BigNumber;
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        sender: string;
        timestamp: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    bosses(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bossesIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeHpOf(
      pokemonIndex: BigNumberish,
      account: string,
      hp: BigNumberish,
      isIncrement: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBossesData(
      _bossesIds: BigNumberish[],
      bossesLevel: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPokemonsData(
      pokemonIndexes: BigNumberish[],
      pokemonNames: string[],
      pokemonImageURIs: string[],
      pokemonHp: BigNumberish[],
      pokemonAttack: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllBossesIds(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPokemons(overrides?: CallOverrides): Promise<BigNumber>;

    getBoss(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPokemon(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPokemonByIndexOf(
      pokemonIndex: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPokemonNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPokemonReadable(
      pokemonData: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPokemonSelected(
      sender: string,
      pokemonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPokemonsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPokemons(overrides?: CallOverrides): Promise<BigNumber>;

    hasNft(overrides?: CallOverrides): Promise<BigNumber>;

    holders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    itemAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nftsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pokemons(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pokemonsNft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateItemAddress(
      _itemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bosses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bossesIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeHpOf(
      pokemonIndex: BigNumberish,
      account: string,
      hp: BigNumberish,
      isIncrement: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBossesData(
      _bossesIds: BigNumberish[],
      bossesLevel: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPokemonsData(
      pokemonIndexes: BigNumberish[],
      pokemonNames: string[],
      pokemonImageURIs: string[],
      pokemonHp: BigNumberish[],
      pokemonAttack: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllBossesIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPokemons(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBoss(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemon(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonByIndexOf(
      pokemonIndex: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonReadable(
      pokemonData: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonSelected(
      sender: string,
      pokemonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPokemons(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pokemons(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pokemonsNft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateItemAddress(
      _itemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
