/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPokemonGameInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "attackBoss(uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bosses(uint256)": FunctionFragment;
    "changeHpOf(uint256,address,uint256,bool)": FunctionFragment;
    "getAllPokemons()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBoss(uint256)": FunctionFragment;
    "getPokemon(uint256)": FunctionFragment;
    "getPokemonByIndexOf(uint256,address)": FunctionFragment;
    "getPokemonNft(uint256)": FunctionFragment;
    "getPokemonReadable(address)": FunctionFragment;
    "getPokemonSelected(address,uint256)": FunctionFragment;
    "getPokemonsOf(address)": FunctionFragment;
    "getTotalPokemons()": FunctionFragment;
    "getTotalPokemonsMinted()": FunctionFragment;
    "hasNft()": FunctionFragment;
    "holders(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nftsOfHolder(address,uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attackBoss",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bosses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeHpOf",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPokemons",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoss",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonByIndexOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonReadable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonSelected",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPokemons",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPokemonsMinted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasNft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "holders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftsOfHolder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attackBoss", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bosses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeHpOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPokemons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBoss", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPokemon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonByIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonReadable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonSelected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPokemons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPokemonsMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftsOfHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "AttackComplete(uint256,uint256)": EventFragment;
    "BattleComplete(uint8)": EventFragment;
    "LevelUp(uint256,tuple)": EventFragment;
    "PokemonNFTMinted(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttackComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BattleComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PokemonNFTMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type AttackCompleteEvent = TypedEvent<
  [BigNumber, BigNumber] & { newBossHp: BigNumber; newPokemonHp: BigNumber }
>;

export type BattleCompleteEvent = TypedEvent<[number] & { status: number }>;

export type LevelUpEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, BigNumber, BigNumber] & {
      hp: BigNumber;
      maxHp: BigNumber;
      attack: BigNumber;
    }
  ] & {
    level: BigNumber;
    stats: [BigNumber, BigNumber, BigNumber] & {
      hp: BigNumber;
      maxHp: BigNumber;
      attack: BigNumber;
    };
  }
>;

export type PokemonNFTMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    tokenId: BigNumber;
    pokemonId: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class IPokemonGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPokemonGameInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attackBoss(
      pokemonIndex: BigNumberish,
      bossId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bosses(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    changeHpOf(
      pokemonIndex: BigNumberish,
      account: string,
      hp: BigNumberish,
      isIncrement: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllPokemons(overrides?: CallOverrides): Promise<[string[]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBoss(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getPokemon(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getPokemonByIndexOf(
      pokemonIndex: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPokemonNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPokemonReadable(
      pokemonData: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        }
      ]
    >;

    getPokemonSelected(
      sender: string,
      pokemonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        }
      ]
    >;

    getPokemonsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        })[]
      ]
    >;

    getTotalPokemons(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalPokemonsMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasNft(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        }
      ]
    >;

    holders(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _pokemonId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attackBoss(
    pokemonIndex: BigNumberish,
    bossId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  bosses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  changeHpOf(
    pokemonIndex: BigNumberish,
    account: string,
    hp: BigNumberish,
    isIncrement: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllPokemons(overrides?: CallOverrides): Promise<string[]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBoss(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPokemon(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPokemonByIndexOf(
    pokemonIndex: BigNumberish,
    sender: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPokemonNft(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPokemonReadable(
    pokemonData: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    }
  >;

  getPokemonSelected(
    sender: string,
    pokemonIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    }
  >;

  getPokemonsOf(
    sender: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    })[]
  >;

  getTotalPokemons(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPokemonsMinted(overrides?: CallOverrides): Promise<BigNumber>;

  hasNft(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    }
  >;

  holders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _pokemonId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nftsOfHolder(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attackBoss(
      pokemonIndex: BigNumberish,
      bossId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bosses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    changeHpOf(
      pokemonIndex: BigNumberish,
      account: string,
      hp: BigNumberish,
      isIncrement: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllPokemons(overrides?: CallOverrides): Promise<string[]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBoss(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getPokemon(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getPokemonByIndexOf(
      pokemonIndex: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPokemonNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPokemonReadable(
      pokemonData: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      }
    >;

    getPokemonSelected(
      sender: string,
      pokemonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      }
    >;

    getPokemonsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      })[]
    >;

    getTotalPokemons(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPokemonsMinted(overrides?: CallOverrides): Promise<BigNumber>;

    hasNft(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      }
    >;

    holders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(_pokemonId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nftsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "AttackComplete(uint256,uint256)"(
      newBossHp?: null,
      newPokemonHp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { newBossHp: BigNumber; newPokemonHp: BigNumber }
    >;

    AttackComplete(
      newBossHp?: null,
      newPokemonHp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { newBossHp: BigNumber; newPokemonHp: BigNumber }
    >;

    "BattleComplete(uint8)"(
      status?: null
    ): TypedEventFilter<[number], { status: number }>;

    BattleComplete(
      status?: null
    ): TypedEventFilter<[number], { status: number }>;

    "LevelUp(uint256,tuple)"(
      level?: null,
      stats?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        }
      ],
      {
        level: BigNumber;
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
      }
    >;

    LevelUp(
      level?: null,
      stats?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        }
      ],
      {
        level: BigNumber;
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
      }
    >;

    "PokemonNFTMinted(address,uint256,uint256)"(
      sender?: null,
      tokenId?: null,
      pokemonId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; tokenId: BigNumber; pokemonId: BigNumber }
    >;

    PokemonNFTMinted(
      sender?: null,
      tokenId?: null,
      pokemonId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; tokenId: BigNumber; pokemonId: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attackBoss(
      pokemonIndex: BigNumberish,
      bossId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bosses(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    changeHpOf(
      pokemonIndex: BigNumberish,
      account: string,
      hp: BigNumberish,
      isIncrement: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllPokemons(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoss(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPokemon(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPokemonByIndexOf(
      pokemonIndex: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPokemonNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPokemonReadable(
      pokemonData: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPokemonSelected(
      sender: string,
      pokemonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPokemonsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPokemons(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPokemonsMinted(overrides?: CallOverrides): Promise<BigNumber>;

    hasNft(overrides?: CallOverrides): Promise<BigNumber>;

    holders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _pokemonId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attackBoss(
      pokemonIndex: BigNumberish,
      bossId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bosses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeHpOf(
      pokemonIndex: BigNumberish,
      account: string,
      hp: BigNumberish,
      isIncrement: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllPokemons(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoss(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemon(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonByIndexOf(
      pokemonIndex: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonNft(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonReadable(
      pokemonData: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonSelected(
      sender: string,
      pokemonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPokemonsOf(
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPokemons(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPokemonsMinted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _pokemonId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftsOfHolder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
