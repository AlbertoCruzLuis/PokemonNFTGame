/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PokemonDataInterface extends ethers.utils.Interface {
  functions: {
    "changeAttack(uint256)": FunctionFragment;
    "changeExperience(uint256)": FunctionFragment;
    "changeHp(uint256)": FunctionFragment;
    "changeLevel(uint256)": FunctionFragment;
    "changeMaxHp(uint256)": FunctionFragment;
    "changeStats((uint256,uint256,uint256))": FunctionFragment;
    "changeTotalExperience(uint256)": FunctionFragment;
    "createPokemonData(uint256,string,string,(uint256,uint256,uint256))": FunctionFragment;
    "data()": FunctionFragment;
    "getAttack()": FunctionFragment;
    "getData()": FunctionFragment;
    "getExperience()": FunctionFragment;
    "getHp()": FunctionFragment;
    "getId()": FunctionFragment;
    "getImageUri()": FunctionFragment;
    "getInfo()": FunctionFragment;
    "getLevel()": FunctionFragment;
    "getMaxHp()": FunctionFragment;
    "getName()": FunctionFragment;
    "getStats()": FunctionFragment;
    "getTotalExperience()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeAttack",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeExperience",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeHp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxHp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStats",
    values: [{ hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTotalExperience",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPokemonData",
    values: [
      BigNumberish,
      string,
      string,
      { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish }
    ]
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAttack", values?: undefined): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExperience",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getHp", values?: undefined): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getImageUri",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLevel", values?: undefined): string;
  encodeFunctionData(functionFragment: "getMaxHp", values?: undefined): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStats", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalExperience",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeAttack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeHp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxHp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTotalExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPokemonData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAttack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImageUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLevel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMaxHp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalExperience",
    data: BytesLike
  ): Result;

  events: {};
}

export class PokemonData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PokemonDataInterface;

  functions: {
    changeAttack(
      attack: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeExperience(
      experience: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeHp(
      hp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLevel(
      level: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMaxHp(
      maxHp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeStats(
      stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeTotalExperience(
      totalExperience: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPokemonData(
      id: BigNumberish,
      name: string,
      imageURI: string,
      stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    data(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      }
    >;

    getAttack(overrides?: CallOverrides): Promise<[BigNumber]>;

    getData(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          },
          [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string] & {
            id: BigNumber;
            name: string;
            imageURI: string;
          };
          stats: [BigNumber, BigNumber, BigNumber] & {
            hp: BigNumber;
            maxHp: BigNumber;
            attack: BigNumber;
          };
          level: BigNumber;
          experience: BigNumber;
          totalExperience: BigNumber;
        }
      ]
    >;

    getExperience(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getImageUri(overrides?: CallOverrides): Promise<[string]>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        }
      ]
    >;

    getLevel(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxHp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getStats(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        }
      ]
    >;

    getTotalExperience(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  changeAttack(
    attack: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeExperience(
    experience: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeHp(
    hp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLevel(
    level: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMaxHp(
    maxHp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeStats(
    stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeTotalExperience(
    totalExperience: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPokemonData(
    id: BigNumberish,
    name: string,
    imageURI: string,
    stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  data(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    }
  >;

  getAttack(overrides?: CallOverrides): Promise<BigNumber>;

  getData(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      },
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      };
      stats: [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      };
      level: BigNumber;
      experience: BigNumber;
      totalExperience: BigNumber;
    }
  >;

  getExperience(overrides?: CallOverrides): Promise<BigNumber>;

  getHp(overrides?: CallOverrides): Promise<BigNumber>;

  getId(overrides?: CallOverrides): Promise<BigNumber>;

  getImageUri(overrides?: CallOverrides): Promise<string>;

  getInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      id: BigNumber;
      name: string;
      imageURI: string;
    }
  >;

  getLevel(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxHp(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  getStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      hp: BigNumber;
      maxHp: BigNumber;
      attack: BigNumber;
    }
  >;

  getTotalExperience(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    changeAttack(
      attack: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeExperience(
      experience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeHp(hp: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeLevel(level: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeMaxHp(maxHp: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeStats(
      stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    changeTotalExperience(
      totalExperience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPokemonData(
      id: BigNumberish,
      name: string,
      imageURI: string,
      stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    data(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      }
    >;

    getAttack(overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        },
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string] & {
          id: BigNumber;
          name: string;
          imageURI: string;
        };
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        level: BigNumber;
        experience: BigNumber;
        totalExperience: BigNumber;
      }
    >;

    getExperience(overrides?: CallOverrides): Promise<BigNumber>;

    getHp(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getImageUri(overrides?: CallOverrides): Promise<string>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        id: BigNumber;
        name: string;
        imageURI: string;
      }
    >;

    getLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxHp(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    getStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        hp: BigNumber;
        maxHp: BigNumber;
        attack: BigNumber;
      }
    >;

    getTotalExperience(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    changeAttack(
      attack: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeExperience(
      experience: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeHp(
      hp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLevel(
      level: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMaxHp(
      maxHp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeStats(
      stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeTotalExperience(
      totalExperience: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPokemonData(
      id: BigNumberish,
      name: string,
      imageURI: string,
      stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    getAttack(overrides?: CallOverrides): Promise<BigNumber>;

    getData(overrides?: CallOverrides): Promise<BigNumber>;

    getExperience(overrides?: CallOverrides): Promise<BigNumber>;

    getHp(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getImageUri(overrides?: CallOverrides): Promise<BigNumber>;

    getInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxHp(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getStats(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalExperience(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeAttack(
      attack: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeExperience(
      experience: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeHp(
      hp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLevel(
      level: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMaxHp(
      maxHp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeStats(
      stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeTotalExperience(
      totalExperience: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPokemonData(
      id: BigNumberish,
      name: string,
      imageURI: string,
      stats_: { hp: BigNumberish; maxHp: BigNumberish; attack: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAttack(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExperience(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImageUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLevel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxHp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalExperience(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
