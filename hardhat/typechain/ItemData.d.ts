/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ItemDataInterface extends ethers.utils.Interface {
  functions: {
    "changeCost(uint256)": FunctionFragment;
    "createItemData(uint256,string,string,string,string,uint256,uint256)": FunctionFragment;
    "data()": FunctionFragment;
    "getCategory()": FunctionFragment;
    "getCost()": FunctionFragment;
    "getData()": FunctionFragment;
    "getDescription()": FunctionFragment;
    "getEffect()": FunctionFragment;
    "getId()": FunctionFragment;
    "getImageUri()": FunctionFragment;
    "getInfo()": FunctionFragment;
    "getName()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createItemData",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCategory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCost", values?: undefined): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDescription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getEffect", values?: undefined): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getImageUri",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;

  decodeFunctionResult(functionFragment: "changeCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createItemData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEffect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImageUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;

  events: {};
}

export class ItemData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ItemDataInterface;

  functions: {
    changeCost(
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createItemData(
      id: BigNumberish,
      category: string,
      name: string,
      description: string,
      imageURI: string,
      cost: BigNumberish,
      effect: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    data(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        };
        cost: BigNumber;
        amount: BigNumber;
      }
    >;

    getCategory(overrides?: CallOverrides): Promise<[string]>;

    getCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    getData(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          info: [BigNumber, string, string, string, string, BigNumber] & {
            id: BigNumber;
            category: string;
            name: string;
            description: string;
            imageURI: string;
            effect: BigNumber;
          };
          cost: BigNumber;
          amount: BigNumber;
        }
      ]
    >;

    getDescription(overrides?: CallOverrides): Promise<[string]>;

    getEffect(overrides?: CallOverrides): Promise<[BigNumber]>;

    getId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getImageUri(overrides?: CallOverrides): Promise<[string]>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        }
      ]
    >;

    getName(overrides?: CallOverrides): Promise<[string]>;
  };

  changeCost(
    cost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createItemData(
    id: BigNumberish,
    category: string,
    name: string,
    description: string,
    imageURI: string,
    cost: BigNumberish,
    effect: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  data(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      },
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      };
      cost: BigNumber;
      amount: BigNumber;
    }
  >;

  getCategory(overrides?: CallOverrides): Promise<string>;

  getCost(overrides?: CallOverrides): Promise<BigNumber>;

  getData(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      },
      BigNumber,
      BigNumber
    ] & {
      info: [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      };
      cost: BigNumber;
      amount: BigNumber;
    }
  >;

  getDescription(overrides?: CallOverrides): Promise<string>;

  getEffect(overrides?: CallOverrides): Promise<BigNumber>;

  getId(overrides?: CallOverrides): Promise<BigNumber>;

  getImageUri(overrides?: CallOverrides): Promise<string>;

  getInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string, BigNumber] & {
      id: BigNumber;
      category: string;
      name: string;
      description: string;
      imageURI: string;
      effect: BigNumber;
    }
  >;

  getName(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeCost(cost: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createItemData(
      id: BigNumberish,
      category: string,
      name: string,
      description: string,
      imageURI: string,
      cost: BigNumberish,
      effect: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    data(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        };
        cost: BigNumber;
        amount: BigNumber;
      }
    >;

    getCategory(overrides?: CallOverrides): Promise<string>;

    getCost(overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        info: [BigNumber, string, string, string, string, BigNumber] & {
          id: BigNumber;
          category: string;
          name: string;
          description: string;
          imageURI: string;
          effect: BigNumber;
        };
        cost: BigNumber;
        amount: BigNumber;
      }
    >;

    getDescription(overrides?: CallOverrides): Promise<string>;

    getEffect(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getImageUri(overrides?: CallOverrides): Promise<string>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, BigNumber] & {
        id: BigNumber;
        category: string;
        name: string;
        description: string;
        imageURI: string;
        effect: BigNumber;
      }
    >;

    getName(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    changeCost(
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createItemData(
      id: BigNumberish,
      category: string,
      name: string,
      description: string,
      imageURI: string,
      cost: BigNumberish,
      effect: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    getCategory(overrides?: CallOverrides): Promise<BigNumber>;

    getCost(overrides?: CallOverrides): Promise<BigNumber>;

    getData(overrides?: CallOverrides): Promise<BigNumber>;

    getDescription(overrides?: CallOverrides): Promise<BigNumber>;

    getEffect(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getImageUri(overrides?: CallOverrides): Promise<BigNumber>;

    getInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeCost(
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createItemData(
      id: BigNumberish,
      category: string,
      name: string,
      description: string,
      imageURI: string,
      cost: BigNumberish,
      effect: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCategory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEffect(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImageUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
