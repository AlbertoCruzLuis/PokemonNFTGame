/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PokemonAttackInterface extends ethers.utils.Interface {
  functions: {
    "attackBoss(uint256,uint256)": FunctionFragment;
    "itemAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "pokemonGameAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateItemAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "attackBoss",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "itemAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pokemonGameAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemAddress",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "attackBoss", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "itemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokemonGameAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateItemAddress",
    data: BytesLike
  ): Result;

  events: {
    "AttackComplete(uint256,uint256,address,uint256)": EventFragment;
    "BattleComplete(uint8,address,uint256)": EventFragment;
    "LevelUp(uint256,tuple,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AttackComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BattleComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AttackCompleteEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber] & {
    newBossHp: BigNumber;
    newPokemonHp: BigNumber;
    sender: string;
    timestamp: BigNumber;
  }
>;

export type BattleCompleteEvent = TypedEvent<
  [number, string, BigNumber] & {
    status: number;
    sender: string;
    timestamp: BigNumber;
  }
>;

export type LevelUpEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, BigNumber, BigNumber] & {
      hp: BigNumber;
      maxHp: BigNumber;
      attack: BigNumber;
    },
    string,
    BigNumber
  ] & {
    level: BigNumber;
    stats: [BigNumber, BigNumber, BigNumber] & {
      hp: BigNumber;
      maxHp: BigNumber;
      attack: BigNumber;
    };
    sender: string;
    timestamp: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class PokemonAttack extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PokemonAttackInterface;

  functions: {
    attackBoss(
      pokemonIndex: BigNumberish,
      bossId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    itemAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pokemonGameAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateItemAddress(
      _itemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  attackBoss(
    pokemonIndex: BigNumberish,
    bossId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  itemAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pokemonGameAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateItemAddress(
    _itemAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    attackBoss(
      pokemonIndex: BigNumberish,
      bossId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    itemAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pokemonGameAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateItemAddress(
      _itemAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AttackComplete(uint256,uint256,address,uint256)"(
      newBossHp?: null,
      newPokemonHp?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        newBossHp: BigNumber;
        newPokemonHp: BigNumber;
        sender: string;
        timestamp: BigNumber;
      }
    >;

    AttackComplete(
      newBossHp?: null,
      newPokemonHp?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        newBossHp: BigNumber;
        newPokemonHp: BigNumber;
        sender: string;
        timestamp: BigNumber;
      }
    >;

    "BattleComplete(uint8,address,uint256)"(
      status?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { status: number; sender: string; timestamp: BigNumber }
    >;

    BattleComplete(
      status?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { status: number; sender: string; timestamp: BigNumber }
    >;

    "LevelUp(uint256,tuple,address,uint256)"(
      level?: null,
      stats?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        string,
        BigNumber
      ],
      {
        level: BigNumber;
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        sender: string;
        timestamp: BigNumber;
      }
    >;

    LevelUp(
      level?: null,
      stats?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        string,
        BigNumber
      ],
      {
        level: BigNumber;
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        sender: string;
        timestamp: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    attackBoss(
      pokemonIndex: BigNumberish,
      bossId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    itemAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pokemonGameAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateItemAddress(
      _itemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attackBoss(
      pokemonIndex: BigNumberish,
      bossId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    itemAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pokemonGameAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateItemAddress(
      _itemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
