/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PokemonHelperInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "LevelUp(uint256,tuple,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LevelUp"): EventFragment;
}

export type LevelUpEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, BigNumber, BigNumber] & {
      hp: BigNumber;
      maxHp: BigNumber;
      attack: BigNumber;
    },
    string,
    BigNumber
  ] & {
    level: BigNumber;
    stats: [BigNumber, BigNumber, BigNumber] & {
      hp: BigNumber;
      maxHp: BigNumber;
      attack: BigNumber;
    };
    sender: string;
    timestamp: BigNumber;
  }
>;

export class PokemonHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PokemonHelperInterface;

  functions: {};

  callStatic: {};

  filters: {
    "LevelUp(uint256,tuple,address,uint256)"(
      level?: null,
      stats?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        string,
        BigNumber
      ],
      {
        level: BigNumber;
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        sender: string;
        timestamp: BigNumber;
      }
    >;

    LevelUp(
      level?: null,
      stats?: null,
      sender?: null,
      timestamp?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        },
        string,
        BigNumber
      ],
      {
        level: BigNumber;
        stats: [BigNumber, BigNumber, BigNumber] & {
          hp: BigNumber;
          maxHp: BigNumber;
          attack: BigNumber;
        };
        sender: string;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
